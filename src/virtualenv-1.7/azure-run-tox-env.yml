parameters:
  tox: ""
  python: ""
  os: "linux"

jobs:
- job: ${{ format('{0}_{1}', parameters.os, parameters.tox) }}
  pool:
    ${{ if eq(parameters.os, 'windows') }}:
      vmImage: "windows-2019"
    ${{ if eq(parameters.os, 'macOs') }}:
      vmImage: "macOS-latest"
    ${{ if eq(parameters.os, 'linux') }}:
      vmImage: "Ubuntu-16.04"

  ${{ if in(parameters.tox, 'pypy', 'py27', 'py34') }}:
    variables:
      PYTHONWARNINGS: 'ignore:::pip._internal.cli.base_command'

  steps:
  # ensure the required Python versions are available
  - task: UsePythonVersion@0
    displayName: setup python
    inputs:
      versionSpec: ${{ parameters.python }}

  - script: "python -c \"import sys; print(sys.version); print(sys.executable)\""
    displayName: show python information

  - script: "python -m pip install -U pip setuptools --user"
    displayName: install pip

  - script: "python -m pip install -U tox --user"
    displayName: install tox

  # provision additional shells
  - ${{ if startsWith(parameters.tox, 'py') }}:
      - ${{if eq(parameters.os, 'linux') }}:
          - script: "sudo apt-get update && sudo apt-get install fish csh"
            displayName: install fish and csh
      - ${{ if eq(parameters.os, 'macOs') }}:
          - script: "brew update -vvv"
            displayName: update brew
          - script: "brew install fish tcsh"
            displayName: install fish and csh

  - script: ${{ format('python -m tox -e {0} --notest --skip-missing-interpreters=false', parameters.tox) }}
    displayName: install test dependencies

  - ${{ if  startsWith(parameters.tox, 'py') }}:
    - script: python -m tox -e coverage --notest --skip-missing-interpreters=false
      displayName: install coverage dependencies

  - script: ${{ format('python -m tox --skip-missing-interpreters=false -e {0}', parameters.tox) }}
    displayName: run tests

  - ${{ if  startsWith(parameters.tox, 'py') }}:
    - task: PublishTestResults@2
      displayName: publish test results via junit
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: ${{ format('$(System.DefaultWorkingDirectory)/.tox/.test.{0}.xml', parameters.tox) }}
        testRunTitle: ${{ format('{0}_{1}', parameters.os, parameters.tox) }}

  - ${{ if  startsWith(parameters.tox, 'py') }}:
    - script: "python -m tox --skip-missing-interpreters=false -e coverage"
      displayName: create coverag report
      condition: succeededOrFailed()

  - ${{ if  startsWith(parameters.tox, 'py') }}:
    - task: CopyFiles@2
      displayName: move coverage files into staging area
      condition: succeededOrFailed()
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)/.tox
        contents: |
          .coverage
          coverage.xml
        targetFolder: $(Build.StagingDirectory)

    - task: PublishBuildArtifacts@1
      displayName: publish coverage file
      condition: succeededOrFailed()
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: ${{ format('coverage-{0}-{1}', parameters.os, parameters.tox) }}
